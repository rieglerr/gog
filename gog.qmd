---
title: "Using ggplot for graphics"
format: pdf
editor: visual
---

## Plan

-   Introduction to grammar of graphics and ggplot
-   Why using ggplot and not Excel/Calc?
-   Basic example of ggplot
-   Exercise for students
-   Introduction to themes
-   apply themes to task what students produced before
-   Let's do some fancy stuff

## Grammar of Graphics

Most of us are familar with producing plots with spreadsheet software such as Microsoft Office or Libre Office. We usually try to plot one or two dimensional data (e.g. plotting a series of share prices, or the relationship between income and education), and then select one of the graphs provided by the software package. While this approach is very straight forward, it (i) diminishes the creativity of the users, (ii) struggles with plotting data that has more than 2 dimensions and (iii) can be very time consuming to replicate or modify the plot. Luckily, Leland Wilkinson (XXX) introduced the idea of the Grammar of Graphis to the world. I took several years until Hadley Wickham's operationalised a variant of the GoG in his ggplot2 R package.

What is the grammar of graphics? According to Wilkinson himself it is:

"The grammar of graphics (GoG) denotes a system with seven classes embedded in
a data flow. This data flow specifies a strict order in which data are
transformed from a raw dataset to a statistical graphic. Each class contains multiple methods,
each of which is a function executed at the step in the data flow corresponding to
that class. The classes are orthogonal, in the sense that the product set of all classes
(every possible sequence of class methods) defines a space of graphics which is
meaningful at every point. The meaning of a statistical graphic is thus determined
by the mapping produced by the function chain linking data and graphic."

What does it mean? 

- GoG is a structured approach of turning data into visualizations by following a specific set of steps. 
- Each step plays a unique role, like preparing the data, choosing how to display it, and adjusting its appearance. 
- Using these steps, we can create a wide variety of meaningful charts and graphs.

Wickham (2008) operationalised this idea by writing the ggplot2 package that
is based on this layered approach, and we are going to use the package today!

## Loading necessary packages and data

The R base package is like a smart phone without any extra apps installed. For example, you can make calls, send messages and even have an exciting ringing tone. While this will be enough for using your smart phone as a "phone", to get most out of it, you will install additional apps, like a music player, VPN, and so on. Similarly, to boost the power of R as a statistical software package, we will install additional packages. One of the most popular packages for example is the `ggplot2` package that allows you to produce professional graphics. We will discuss them in more detail in today's session.

Let's install the following package: `tidyvers`. This package also include the `ggplot2` package and others that will simplify data manipulation.

```{r}
#| eval: false
install.packages("tidyverse")
```

Once it is install, don't forget to activate it!

```{r}
#| warning: false
library("tidyverse")
```

The `ggplot2` package also contains some example datasets. We will use the mpg dataset to introduce ggplot and follow the example by Wickham et al. (2025) <https://ggplot2-book.org>

To get an idea what the data looks like, just type:

```{r}
head(mpg)
```

The variables are:

-   `cty` and `hwy` record miles per gallon (mpg) for city and highway driving.
-   `displ` is the engine displacement in litres.
-   `drv` is the drivetrain: front wheel (f), rear wheel (r) or four wheel (4).
-   `model` is the model of car. There are 38 models, selected because they had a new edition every year between 1999 and 2008.
-   `class` is a categorical variable describing the “type” of car: two seater, SUV, compact, etc.

## Let's get started with ggplot

Using the grammar of graphics concept, we will analysie the relationship between `displ` and `hwy`. Remember the three steps of producing graphs: 1. select the **data** 2. set **aesthetic** properties 3. add **layers** to display the data

We begin with mapping data to aesthetic properties:

```{r}
ggplot(mpg, aes(x = displ, y = hwy))
```

The graph is empty! We can see that we have the correct labels on the axes, but we did not add the necessary layer to display the data. We can use geometric object, or *geoms* to do make the command do what we would expect it to do: to show data!

```{r}
ggplot(mpg, aes(x = displ, y = hwy)) +
 geom_point() 
```

You can add another layer like a regression line to the plot to picture the statistical relationship between the variables:

```{r}
ggplot(mpg, aes(x = displ, y = hwy)) +
 geom_point() +
  geom_smooth(method = "lm", se = FALSE)
```

By changing the mapping aesthetics, we can also introduce different colour schemes for different groups in our data. For example, we would like to add a "third" dimension to the graph, by colour-coding the data by car class.

```{r}
ggplot(mpg, aes(x = displ, y = hwy, colour = class)) +
 geom_point() 
```

If you want to save the planet, don't drive an SUV or Pickup truck given that they have the lowest miles per gallon statistics. Using the colour option in the mapping aesthetics, all layers will apply the same grouping options. If we add our `geom_smooth` layer again, we do not have to specify the colouring!

```{r}
ggplot(mpg, aes(x = displ, y = hwy, colour = class)) +
 geom_point() +
  geom_smooth(method = "lm", se= FALSE)
```

If you would like to add only one overall regression line using the whole data, but keeping the colour-coding, we have to make a small adjustment. We move the mapping aesthetics option `aes(..., colour = class)` into the `geom_point()` layer, so that colouring with respect to car class only applies to the points, and not to `geom_smooth()`.

```{r}
ggplot(mpg, aes(x = displ, y = hwy)) +
 geom_point(aes(colour = class)) +
  geom_smooth(method = "lm",se = FALSE)
  
```

## Faceting

Another popular method for plotting data for different groups is faceting. This means that we split the data into subsets and produce the same plot for each subset of the data. A great example for the usefulness of the method can be found her: <https://www.scientificamerican.com/article/climate-change-drives-escalating-drought/>

Before we can produce such advanced graphs, let's look at the basics first:

```{r}
ggplot(mpg, aes(displ,hwy)) +
  geom_point() +
  facet_wrap(~class)
```

## Student Exercises

Import the *region_data.csv* dataset from <https://github.com/rieglerr/gog>. This dataset was sourced from <https://www.ons.gov.uk/> and simplified to only contain aggregated regional data on gross disposable household income per capita for the period 1997 to 2022. Note that the data is measured in GBP at current prices.

Complete the following tasks:

1.  Load the dataset
2.  Look at the data
3.  Create a plot using the ggplot command. Add the *year* variable to the x axis, and *GDHI_pc* on the y-axis and the `colour = Region_name` option to the mapping aesthetics to illustrate regional differences. Select a suitable geometric object to display the data. Experiment with different options from this list and select the one you think is most suitable for:

-   `geom_area`
-   `geom_line`
-   `geom_point`

4.  Use faceting to create a plot for each region. We do not need a separate legend, we can surpress it by adding the layer `theme(legend.position="none")`.
5.  In what regions did we find the largest increase in gross disposable household income per capita?

## Exercise solutions

### 1

```{r}
region_data <- read.csv("~/Dropbox/work/gog/data/region_data.csv")
```

### 2

```{r}
head(region_data)
```

### 3

```{r}
ggplot(region_data, aes(x = year, y = GDHI_pc, colour = Region_name)) +
  geom_point()

ggplot(region_data, aes(x = year, y = GDHI_pc, colour = Region_name)) +
  geom_line()

ggplot(region_data, aes(x = year, y = GDHI_pc, colour = Region_name)) +
  geom_area()

```

`geom_line()` is most suitable for the data.

### 4

```{r}
ggplot(region_data, aes(x = year, y = GDHI_pc, colour = Region_name)) +
  geom_line() +
  facet_wrap(~Region_name) +
  theme(legend.position="none")
```

### 5

London has experienced the largest increase in GDHI per capita. With the exception of the South East, most regions have a significantly lower disposable income.

## Themes

Using themes can facilitate the generation of professional graphics. Institutions like the BBC have their own themes. That means any BBC journalist can produce charts that follow the official BBC guidelines easily!

The BBC plot package is not part of the standard R repository, but can be easily downloaded from the BBC github account.

```{r}
#| echo: FALSE
#| eval: FALSE
library(remotes) # package needed to allow us installing packages from github
install_github("bbc/bbplot")
```

```{r}
library(bbplot) # activate bbc style theme
```

```{r}
region_data_sel <- read.csv("~/Dropbox/work/gog/data/region_data_sel.csv")
```

```{r}
ggplot(region_data_sel, aes(x = year, y = GDHI_pc, colour = Region_name)) +
  geom_line() 

ggplot(region_data_sel, aes(x = year, y = GDHI_pc, colour = Region_name)) +
  geom_line() +
  theme_bw()

ggplot(region_data_sel, aes(x = year, y = GDHI_pc, colour = Region_name)) +
  geom_line() +
  theme_dark()

ggplot(region_data_sel, aes(x = year, y = GDHI_pc, colour = Region_name)) +
  geom_line() +
  theme_linedraw()

ggplot(region_data_sel, aes(x = year, y = GDHI_pc, colour = Region_name)) +
  geom_line() +
  bbc_style()
```


## The final touches
What about further annotations as the final touches for your plots? When you create graphs you have to think like an economist, i.e. what are the opportunity costs of your actions. Visually,
you can do nearly anything you like with R's ggplot2 package, however, you
will reach a point where some small annotations may be too time consuming. These could be swiftly done with other graphics packages like GIMP, Adobe Illustrator or even MS Paint. 

As Keyes (2024) states: "Get yourself 90 percent of the way there with ggplot
and then use Illustrator, Figma, or a similar tool to finish your work." Get
the aesthetics, layers and a suitable theme so that you can easily replicate
your work our use it as a template for updated data you are using. If you add
annotations, that are very case specific, i.e. cannot be used again for other variants of your plot, then consider using an external programme.  